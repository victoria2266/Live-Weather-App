{"version":3,"sources":["video/weathervideo.mp4","App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","title","setTitle","console","log","main","className","autoPlay","loop","muted","style","width","minHeight","src","Weathervideo","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","type","placeholder","onChange","e","target","value","onClick","onKeyPress","evt","key","fetch","then","res","json","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,G,MAAA,IAA0B,0CCInCA,EACC,mCADDA,EAEE,2CAiFOC,MA9Ef,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIaJ,mBAAS,oBAJtB,mBAINK,EAJM,KAICC,EAJD,KAgCb,OA1BAC,QAAQC,IAAI,gBAAiBL,EAAQM,MA2BnC,sBAAKC,UAAU,MAAf,UAEE,6BAAKL,IAEL,uBAAOM,UAAQ,EAACC,MAAI,EAACC,OAAK,EACxBC,MAAO,CACLC,MAAO,OACPC,UAAW,QAHf,SAKE,wBAAQC,IAAMC,MAGhB,8BAC2B,oBAAhBf,EAAQM,KACf,sBAAKC,UAAU,eAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BP,EAAQgB,KAAnC,KAA2ChB,EAAQiB,IAAIC,WACvD,qBAAKX,UAAU,OAAf,SA9BQ,SAACY,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqBDE,CAAY,IAAIC,WAEzC,qBAAKtB,UAAU,cAAf,SACE,sBAAKA,UAAU,OAAf,UACGuB,KAAKC,MAAM/B,EAAQM,KAAK0B,MAD3B,QAEE,qBAAKzB,UAAU,UAAf,SAA0BP,EAAQA,QAAQ,GAAGM,eAKhD,KAIP,uBACE2B,KAAK,OACL1B,UAAU,aACV2B,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIrC,EAASqC,EAAEC,OAAOC,QACjCC,QAAS,kBAAMpC,EAAS,KACxBmC,MAAOxC,EACP0C,WA/DS,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIhD,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDiD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ9C,EAAW8C,GACXhD,EAAS,IACTK,QAAQC,IAAI0C,aCZPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50e93a42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weathervideo.15f64c9c.mp4\";","import React, { useState } from 'react';\nimport './App.css';\nimport Weathervideo from \"./video/weathervideo.mp4\"\n\nconst api = {\n  key: \"98e193595faf010315e7b901d60d1b5a\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [title, setTitle] = useState('Live Weather App');\n\n  console.log(\"wheater main:\", weather.main);\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className=\"app\">\n\n      <h1>{title}</h1>\n\n      <video autoPlay loop muted\n        style={{\n          width: \"100%\",\n          minHeight: \"100%\"\n        }}>\n        <source src={(Weathervideo)} />\n      </video>\n\n      <div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div className=\"weather-info\">\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°C\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n\n            </div>\n          </div>\n        ) : ('')}\n      </div>\n\n\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search...\"\n        onChange={e => setQuery(e.target.value)}\n        onClick={() => setTitle('')}\n        value={query}\n        onKeyPress={search}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}